#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('test1:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require("socket.io")(server);

io.on("connection", (socket) => {
  /*****Begin*****/
  //连接加入子房间
  // socket.join(data.room);
  // socket.join(data.socketID);
  // socket.to(data.room).emit("new user", {socketID: data.socketID});

  //当有新用户加入，打招呼时，需要转发消息到所有在线用户。
  socket.on("new user greet", (data) => {
    console.log(data);
    console.log(socket.id + " greet" + data.msg);
    socket.broadcast.emit("need connect", { sender: socket.id,msg: data.msg});
  });
  //在线用户回应新用户消息的转发
  socket.on("ok we connect", (data) => {
    io.to(data.receiver).emit("ok we connect", { sender: data.sender});
  });

  //sdp 消息的转发
  socket.on("sdp", (data) => {
    console.log("sdp");
    console.log(data.description);
    socket.to(data.to).emit("sdp", {
      description: data.description,
      sender: data.sender,
    });

  });

  //candidates 消息的转发
  socket.on("ice candidates", (data) => {
    console.log("ice candidates:  ");
    console.log(data);
    socket.to(data.to).emit("ice candidates", {
      candidate: data.candidate,
      sender: data.sender,
    });

  });
  /*****End*****/
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
